






//list
a := (ding1, ding2, ding3)

a.pop()

b := [a,b,c]
b := [10][10]Int
b := [3]
















u8 array[N]
slist
dlist
string








d := slist[dodo]

struct dodo {
       u8 length
       string name
}

foreach(V in x) {
          
}





repeat(10) {

}

doStuff := (list<dodo> A, string data) => {

}

array.map()
     .shift()
     .foldLeft()
     .map()


namedFunc := () => {
  defer:{
      close_file(fp)
  }

  open some file
  read it
  -> fail -> defer
  -> suc -> defer
}































actors.map()
actors.each((a)=>{ printf("%s", a.name)})








do_all := function(a List<Actor>){
       a.map((b)=>{ })
       .foldRight()
       .curry
       
}



def do_all := (a <Actor>) => {
    action(a);
    return(a);
}











