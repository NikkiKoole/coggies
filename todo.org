* Currently doing

                                   |
                                   |
                                   |
                                   |
                                  y|
                               0,0,0-------- x
                                    \
                                     \ z

  I think the whole positioning of everything is flipped, but I am not sure, investigate...
  Yes the actors are flipped over Y, text is too, walls arent :/
  I think it would be wise to let the Actor/Wall and Glyph (as the structs in memory.h) all have world positions immeadiatly
  (So no more x=1, y=1 z=1 for a wall block at tile position 1,1,1, just multiiply it with the block sizes already)
  (For blocks however it could be usefull to keep the tilepositions around (for path finding purposes down the line I think))

  The way the block are oriented shows why the walls werent flipped over Y.
  I do want them to be consistently (wrong) like the others.
  So I have to calculate the screenY outside the render loops too (So i can flip it in there.)
  maybe walls and actors will get a screenY property (the x is usable already..)

  (like the Glyph has already)
  (btw there will be y & z, that will still need to be made into a screenY)
  then I can generalise them a bit more.
  also I want to get rid of the large vertices for loops for every kind if possible.


  I reckon I will want two passes
  One where I assume the screen will be of *some* dismensions and 0,0 is at the top left corner.
  This is how I want to feed the position data

  Then in the renderer this position is being offsetted to center, maybe that offset is the same 'thing' as is being used with panning.
  You can imagine initializeing the pan value, so the world is centered at start.

  Since I dont really feel like computing screen positions in my game code.
  I will keep the data being x,y,z


* todo
- [-] build a renderer for my needs
  - [-] make world position, screen position more stable and the same for everything
    - now we have Glyphs, Actors and Walls, there will be more but I want to take the time to generalise them now.
  - [ ] pan & zoom functionality.
  - [ ] visible surface detection
    for the wall parts its a important optimization to not draw all these elements that are totally occluded by other ones.
    keywords, front to back. I have to think a bit more about the datatypes involved, I solved this before using a dlList to grow the bounding boxes while drawing front->back
  - [ ] frame based animation using Â±4 body parts
    - [ ] head
    - [ ] mouth
    - [ ] upper body
    - [ ] lower body
  - [ ] spritesheet texture atlasses.
  - [X] have some text drawing, fuck unicode, fuck boxes, geom and crazy symbols, just the simplest 32-128 ascii there is
    I think I'll use bmfont to generate a bitmap font, which atleast will mean parsing the fnt file.
    the bitmap itself is an tga
  - [X] make a more general purspose batch way of drawing
    for now I am limited in the batch size, I dont really want that, I want to be able to just try and draw 100_000 actors, even if its slow.
  - [X] have possibly more buffers per group, I believe (but test this) that 2000 elements in a buffer is a good size.
    for actors that have 4 parts that means +-500 actors is about the max size of 1 buffer.
    actor group
    architecture group
    text group ?
    fx group ?
  - [X] sort on Y and Z
    z is automagically by using a z buffer, y will need o be done client side.
    just using qsort for it, maybe that can one day be replaced with my own, but why bother.
  - [X] many dynamic actors with depth
  - [X] make a way you can add or remove actors
  - [X] pallet swapping for multiple looks of actors
  - [X] many static architecture object (walls, floors) that have a depth
- [-] get sdl2 up and running
  - [ ] win32
  - [ ] android
  - [X] ios
    why is there extra cruft on the screen though ? x1x2 switch and carrier time and battery stuff?
    Project settings -> General -> Deployment info -> Devices = Universal (this was iphone)
    now theres no splash screen anymore though, under Deployment info there's App icons and Launch Images that'll be for that. maybe later
    http://ticons.fokkezb.nl/ can generate splash screens in all resolutions at once.
  - [X] osx
  - [X] rpi2
    - [X] find out what the deal is with input events, they dont really work in X11 and on the terminal they make the console unresponsive at end
      installing libudev, adding user to input group (usermod/adduser) and getting rid of close function (name is taken already by os) seemed todo it (https://github.com/kphillisjr/SDL2/blob/master/README-raspberrypi.txt)
      I was also under the impression linking to bcmhost and initting and deinitting seemed to solve something too, but thats unrelated at second glance.
      Also I've updated/upgraded my rpi. at what point the issue was solved is hard to say...
  - [X] linux
- [-] live code reloading and osx master rpi slave behaviour for code swapping
  `fswatch --exclude '\.#'  ./src | xargs -I {} sh -c "cp '{}' ./otherfolder && make"`
  the line above will watch the src folder, when a file changes (except for the emacs temp # crap) it
  triggers a copy of that file to 'otherfolder', adapt this to a scp to the rpi, and it triggers a make command
  the rpi should just have to have a watcher for a folder, when something changes only does the makefile.
  , seeing how the scp will copy a file from osx to the rpi, the rpi watcher will trigger and do a recompile itself.
  `fswatch --exclude '\.#'  ./src | xargs -I {} sh -c "scp '{}' pi@192.168.1.66:~/test2/ && make"`
  handles the scp-ing to the remote pi
  on rpi fswatch cannot be installed, so instead i went with inotify
  `sudo apt-get install inotify-tools`
  - [ ] build state struct that remains intact after reloading the lib
  - [ ] makefile command to build so library
  - [ ] loading of a lib
  - [X] scp commands
  - [X] memory sheme
  - [X] filesystem watcher

* done
- [X] made a fps counter on screen
- [X] get some json loading/parsing in (DONT NEED JSON ANYMORE)
  needed for texture atlasses generated by shoebox
  alternatively I could rewrite the outputted json into some custom fileformat thats exaclty right for my c structs, maybe move the json parsing into an external app
  I ended up writing a node app that just creates a binary format of the shoebox js/ json output
  there is one part unclear to me t the moment (spriteSource W, spriteSource H and the other W and H) but I can only know how this works once I start using a lot of sprites
- [X] multiplatform support
  - [X] makefile as simple as possible, screw keeping .o files around
- [X] have some barebones opengl(es) way of rendering stuff
  - [X] get gl working in sdl2
  - [X] use opengl (3.2) for the desktops
  - [X] use opengles (2.0) for mobile
- [X] JPS PLus pathfinder is broken
  the simplest broken thing was in the cardinal preprocess tests
  if (node->isJumpNode) {  // new situation
    //if (node->isJumpNode && countMovingWest > 0) { // old situation
    countMovingWest = 0;
    jumpPointLastSeen = 1;
  }
  Ok still broken spiral3 is te simplest case thast busted/
- [X] compile sdl_mixer and sdl 2 for all platforms
- [X] make some sorting (need memory scheme for algorithm) to sort wall parts on their Y position.
  just using qsort seemed to be sweet.

*** Compiling SDL2_Mixer
**** ios
  Download the source zip.
  Unzip in a new directory.
  It needs SDL.h, check the paths its looking for, place a dir SDL/include with all headers next to the
  unzipped folder. (atleast thats where it was looking last when I did it)
  To get it working with c you need to disable the mod and midi preprocessor flags, we only need ogg and wav
  compile it for the simulator and for a real device (release = build for profiling)
  then combine both these libs into 1 universal with
  lipo libSDL2_mixerDev.a libSDL2_mixerSim.a -create -output libSDL2_mixer.a
**** rpi
    Download the zip
    mkdir build
    cd build
    ../configure --disable-music-mod --disable-music-midi
    make -j 4
    make install

* tools
- http://renderhjs.net/shoebox/ for generating texture atlasses
  sadly I cannot really get that AIR thing working on *nux, damn adobe
  keep my eyes open for an alternativools
- http://www.angelcode.com/products/bmfont/ for generating bitmap fonts
