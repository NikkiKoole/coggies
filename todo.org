
* Currently doing
  make some sorting (need memory scheme for algorithm) to sort wall parts on their Y position.


** Coggies todo list
- [-] get sdl2 up and running
  - [X] ios
    why is there extra cruft on the screen though ? x1x2 switch and carrier time and battery stuff?
    Project settings -> General -> Deployment info -> Devices = Universal (this was iphone)
    now theres no splash screen anymore though, under Deployment info there's App icons and Launch Images that'll be for that. maybe later
    http://ticons.fokkezb.nl/ can generate splash screens in all resolutions at once.
  - [X] osx
  - [X] rpi2
    - [X] find out what the deal is with input events, they dont really work in X11 and on the terminal they make the console unresponsive at end
      installing libudev, adding user to input group (usermod/adduser) and getting rid of close function (name is taken already by os) seemed todo it (https://github.com/kphillisjr/SDL2/blob/master/README-raspberrypi.txt)
      I was also under the impression linking to bcmhost and initting and deinitting seemed to solve something too, but thats unrelated at second glance.
      Also I've updated/upgraded my rpi. at what point the issue was solved is hard to say...
  - [X] linux
  - [ ] win32
  - [ ] android
- [-] live code reloading and osx master rpi slave behaviour for code swapping
  `fswatch --exclude '\.#'  ./src | xargs -I {} sh -c "cp '{}' ./otherfolder && make"`
  the line above will watch the src folder, when a file changes (except for the emacs temp # crap) it
  triggers a copy of that file to 'otherfolder', adapt this to a scp to the rpi, and it triggers a make command
  the rpi should just have to have a watcher for a folder, when something changes only does the makefile.
  , seeing how the scp will copy a file from osx to the rpi, the rpi watcher will trigger and do a recompile itself.
  `fswatch --exclude '\.#'  ./src | xargs -I {} sh -c "scp '{}' pi@192.168.1.66:~/test2/ && make"`
  handles the scp-ing to the remote pi
  on rpi fswatch cannot be installed, so instead i went with inotify
  `sudo apt-get install inotify-tools`
  - [X] filesystem watcher
  - [X] scp commands
  - [X] memory sheme
  - [ ] build state struct that remains intact after reloading the lib
  - [ ] makefile command to build so library
  - [ ] loading of a lib
- [ ] get some json loading/parsing in
  needed for texture atlasses generated by shoebox
- [-] build a renderer for my needs
  - [ ] sort on Y and Z
    z is automagically by using a z buffer, y will need o be done client side.
  - [ ] pan & zoom functionality.
  - [ ] have possibly more buffers per group, I believe (but test this) that 2000 elements in a buffer is a good size.
    for actors that have 4 parts that means +-500 actors is about the max size of 1 buffer.
    actor group
    architecture group
    text group ?
    fx group ?
  - [X] many static architecture object (walls, floors) that have a depth
  - [X] many dynamic actors with depth
  - [X] pallet swapping for multiple looks of actors
  - [ ] frame based animation using Â±4 body parts
    - [ ] head
    - [ ] mouth
    - [ ] upper body
    - [ ] lower body
  - [ ] spritesheet texture atlasses.

** Tools in use
- http://renderhjs.net/shoebox/ for generating texture atlasses
  sadly I cannot really get that AIR thing working on *nux, damn adobe
  keep my eyes open for an alternative

** Done
- [X] multiplatform support
  - [X] makefile as simple as possible, screw keeping .o files around
- [X] have some barebones opengl(es) way of rendering stuff
  - [X] get gl working in sdl2
  - [X] use opengl (3.2) for the desktops
  - [X] use opengles (2) for mobile
- [X] JPS PLus pathfinder is broken
  the simplest broken thing was in the cardinal preprocess tests
  if (node->isJumpNode) {  // new situation
    //if (node->isJumpNode && countMovingWest > 0) { // old situation
    countMovingWest = 0;
    jumpPointLastSeen = 1;
  }
  Ok still broken spiral3 is te simplest case thast busted/

- [X] compile sdl_mixer and sdl 2 for all platforms
*** Compiling SDL2_Mixer
**** ios
  Download the source zip.
  Unzip in a new directory.
  It needs SDL.h, check the paths its looking for, place a dir SDL/include with all headers next to the
  unzipped folder. (atleast thats where it was looking last when I did it)
  To get it working with c you need to disable the mod and midi preprocessor flags, we only need ogg and wav
  compile it for the simulator and for a real device (release = build for profiling)
  then combine both these libs into 1 universal with
  lipo libSDL2_mixerDev.a libSDL2_mixerSim.a -create -output libSDL2_mixer.a
**** rpi
    Download the zip
    mkdir build
    cd build
    ../configure --disable-music-mod --disable-music-midi
    make -j 4
    make install
