* Project I am working towards: Escalator Simulator
  People ought to keep left on the escalator, so other people can overtake them whilst walking.
  Some people dont keep left, the ones in a hurry get annoyed.
  All types of people take the escalator.


* Currently doing / Next up
 - get rid of input code in main, move it to game

  - [-] animating body parts
    I initially wanted to have (torso, left arm, right arm, legs and head) as parts
    I dont want to start with that anymore though, just do a body and head (2 parts)
    It'll be much more lightweight for the RPI and more then enough (for the moment)
    - [X] make a texture atlas and map file from ASE files, can use aseprite cli interface for that.
    - [X] also in that ASE file i will need to place anchor points and save them out.
    - [X] the anchor points shouldn't be visible in the texture atlas, I just need their locations
    - [X] to summarize: I need some data structure which combines: originalSource size, currentSource size, pivot position, anchor point(s) position(s). PER body part.
    - [ ] the json needs to be transformed into a binary file format and/or into a H/C file i can link to.
      this is working for the simpler 'block' texture atlas (generated with ShoeBox), not yet for the ASE Files


* known bugs
 - bug: shadow gets in way of stairs below

* Todo
- [ ] move the renderstate into permament memory (I ran into stack overflow issues, the thing is just getting too big (> 8MB))
- [ ] play around a little with the "keys for doors" concept,
  a few things ahead: the jumppoints shouldnt be diagonally placed but before & after the door directly
  closing doors for a new actor at pathfind beginning means also changing distances, so I think just having a jumppoint ON the door TOO is easiest
  i can just set its distance east & west OR north & south temporary to 0 and set them back to 1 and 1 after I am done.
- [ ] Ive done Reynolds steering behaviours, but its still a bit too much bouncing ball like, eventually i want it to be smarter, more human like
    In Game AI PRO 2 chapter 19 there is a Guide to Anticipatory Collision Avoidance (Guy, Karamouzas) which seems promising.
- [ ] fix the key input stuff, now its in main, id rather do it in the gamelib code I think
- [ ] have some way of seeing how much memory is in use, specifically in the permanent block.
  this would mean allocating / or well PUSH_STRUCT calls will need to be feed a string,
  UPDATE: Thinking a bit more about this, seeing how PUSH-STRUCT is a MACRO I could just save the file/function/line data in the debug arena for an allocation
  not really tagged as in : 'actors/pathfinddata' but reasonably close nonetheless (as long as my function names are clear), and no need for extra strings to think up
- [ ] tag memory usage
  I would like to start tagging memory usage with labels like "actors/sprite", "renderer/walls/vbo", "pathfinder/JPS" things like that, so I can during runtime inspect what the memory usage for various pieces is.
  Thinking about it, i dont know how to handle tagging the scratch/transient memory block...
- [-] enable developing on osx, autoupdate rpi in network.
  `fswatch --exclude '\.#'  ./src | xargs -I {} sh -c "cp '{}' ./otherfolder && make"`
  the line above will watch the src folder, when a file changes (except for the Emacs temp # crap) it
  triggers a copy of that file to 'otherfolder', adapt this to a scp to the rpi, and it triggers a make command
  the rpi should just have to have a watcher for a folder, when something changes only does the makefile.
  , seeing how the scp will copy a file from osx to the rpi, the rpi watcher will trigger and do a recompile itself.
  `fswatch --exclude '\.#'  ./src | xargs -I {} sh -c "scp '{}' pi@192.168.1.66:~/test2/ && make"`
  handles the scp-ing to the remote pi
  on rpi fswatch cannot be installed, so instead i went with inotify
  `sudo apt-get install inotify-tools`
  - [X] scp commands
  - [ ] enable it
- [-] build a renderer for my needs
  - [-] debug rendering stuff
    - [X] lines for pathfinder (to show paths that have ben found (x y z in 3 colors))
    - [ ] bboxes of objects to check hitarea and collisions down the line
  - [ ] visible surface detection
    for the wall parts its a important optimization to not draw all these elements that are totally occluded by other ones.
    keywords, front to back. I have to think a bit more about the data types involved, I solved this before using a dlList to grow the bounding boxes while drawing front->back
  - [ ] benchmark manually zsorting every world item and just using x/y VS the current x/y/z + depth-buffer approach:
    I've the feeling the zsorting without using a depth  buffer actually will be better(faster) in my case. And it might make more items/larger buffers possible
    since I don't have to move the Z in the VBO's and the depth buffer func doesn't need to run.
    it will mean a lot of rewriting though for now I just want to move forward and not care about this.
  - [X] make world position, screen position more stable and the same for everything
    now we have Glyphs, Actors and Walls, there will be more but I want to take the time to generalize them now.
  - [ ] frame based animation using Â±4 body parts
    - [ ] head
    - [ ] torso
    - [ ] left arm
    - [ ] right arm
    - [ ] lower body
  - [ ] sprite sheet texture atlasses.
  - [-] pan & zoom functionality.
    - [X] pan
    - [ ] zoom
  - [X] either fixed  OR variable time step. (now i do nothing particular)
    maybe during development variable timestep at the end change it too fixed.
    its variable at the moment
  - [X] have some text drawing, fuck Unicode, fuck boxes, geom and crazy symbols, just the simplest 32-128 ASCII there is
    I think I'll use bmfont to generate a bitmap font, which at least will mean parsing the fnt file.
    the bitmap itself is an tga
  - [X] make a more general purpose batch way of drawing
    for now I am limited in the batch size, I don't really want that, I want to be able to just try and draw 100_000 actors, even if its slow.
  - [X] have possibly more buffers per group, I believe (but test this) that 2000 elements in a buffer is a good size.
    for actors that have 4 parts that means +-500 actors is about the max size of 1 buffer.
    actor group
    architecture group
    text group ?
    fx group ?
  - [X] sort on Y and Z
    z is auto magically by using a z buffer, y will need o be done client side.
    just using qsort for it, maybe that can one day be replaced with my own, but why bother.
  - [X] many dynamic actors with depth
  - [X] make a way you can add or remove actors
  - [X] pallet swapping for multiple looks of actors
  - [X] many static architecture object (walls, floors) that have a depth
- [-] get sdl2 up and running
  - [ ] win32
  - [ ] android
  - [X] ios
    why is there extra cruft on the screen though ? x1x2 switch and carrier time and battery stuff?
    Project settings -> General -> Deployment info -> Devices = Universal (this was iPhone)
    now there's no splash screen anymore though, under Deployment info there's App icons and Launch Images that'll be for that. maybe later
    http://ticons.fokkezb.nl/ can generate splash screens in all resolutions at once.
  - [X] osx
  - [X] rpi2
    - [X] find out what the deal is with input events, they don't really work in X11 and on the terminal they make the console unresponsive at end
      installing libudev, adding user to input group (usermod/adduser) and getting rid of close function (name is taken already by OS) seemed to do it (https://github.com/kphillisjr/SDL2/blob/master/README-raspberrypi.txt)
      I was also under the impression linking to bcmhost and initting and deinitting seemed to solve something too, but that's unrelated at second glance.
      Also I've updated/upgraded my rpi. at what point the issue was solved is hard to say...
  - [X] Linux
- [-] optimize
  on the rpi I can only draw 1000 actors and 1000 walls, more then that I go under 60fps.
  - I could improve it a little bit (I think) by making my VBO's smaller (zindex and palette index could go with some work)
  - I could get rid of the Z's and do manual sorting instead of depth func testing.
  - For the walls I could also get rid of the palette index, and just have all colors I want in the TGA file. (maybe I can do that for the actors too actually)
  - There's also visible surface testing which can shave some draws off.
  - the walls more specifically the floors they draw a tile sized 24x108 pixels of which the most is just transparent, It could be done by drawing 24x12 pixels at some offset
    (this will actually be fixed as soon as I am using texture atlasses)
  However, it might be a wiser idea to just get a rpi3 (or better) and don't care.

  - [ ] half floats
    On the same note I could try and give GL_OES_vertex_half_float a look over, that too -if I can use it in sdl2- can shave a lot of my buffers (50%)
    Haha top hit on Google: https://www.raspberrypi.org/forums/viewtopic.php?t=125128&p=839778 (my own question...)
    gcc documentation saying that it supports a half-float type (__fp16) for ARM targets.
    Ok half float is being used, sadly it doenst really has much effect, only when buffers are really large, and framerate is down to 100ms on rpi anyway
    then it does save 10/20% compared to glFloat ah well.. atleast my meory usage is down with 50%

  - [X] Another thing that needs measuring, try out MVP matrixes instead of caluclating my vertices on the CPU, its much easier to use, not usefull as an optimization, but just better

  - [ ] Another thing that needs experimenting is the usage of depthbuffer
    https://www.opengl.org/discussion_boards/showthread.php/153121-Reading-the-Depth-Buffer-Why-so-slow
    It seems feeding floats (which I do) is by far the slowest, rather use chars or shorts

  - [ ] filling the vertice arrays on CPU side
    on the rpi this appeasr to be quite a costly part of the whole frame time, on OSX is something like 25% of the time too.
   try to optimize this, first by helping the compiler, (no function calls, setting up varibale more strict)
   and maybe afterwards by trying out SIMD / NEON to fill that data.
   https://software.intel.com/en-us/articles/creating-a-particle-system-with-streaming-simd-extensions

   see2 -> neon (so i can build some nice macros)
   http://codesuppository.blogspot.co.uk/2015/02/sse2neonh-porting-guide-and-header-file.html
- [-] game play stuff
  - [-] pathfinder
    Next to hooking it in, the current pathfinder code also needs some dirty list (to help cleaning the data quickly) and maybe some notion of keys (to help actors not look in rooms they shouldnt be in)
    the key stuff is not mandatory its just an improvement, the dirtylist stuff is mandatory otherwise the whole 10 Mb of data needs cleaning for every actor.
    Another feature thats still needed in the pathfinder is a notion of stairs that are directed; when changing the z-level with them your X or Y will aslo changes; TLDR: stairs are not ladders.
    - [X] JPS plus / JPS / A*
    - [ ] keys for doors
    - [ ] dirty list
    - [X] stairs are not ladders, move over x/y when changing z on them.
  - [ ] collision detection & avoidance for actors


* Done
- [X] look at stb PNG again, writing that non compressed top left TGA might get old very soon when i need to draw a lot.

- [X] clean up the GLKMath code, preferably into 1 header file and get rid of all the unneeded cruft

- [X] worldmatrix uniforms (instead of calculating all on CPU), to make scaling/rotating the whole game easy. (profile on rpi)

- [X] some steering stuff
  its done in steering_test
  read about path following, collison avoidance, steering behaviours:
  http://gamedev.stackexchange.com/questions/12186/real-time-dynamic-pathfinding
  https://www.cie.bgu.tum.de/upload/lehre/softwarelab/sl2011/projects/topics/pedestrianSimulation.pdf
  https://forum.unity3d.com/threads/colorboid-engine.154279/
  http://opensteer.sourceforge.net/
  https://www.youtube.com/watch?v=pqBSNAOsMDc
  http://rll.berkeley.edu/~sachin/papers/Patil-TVCG2011.pdf
  START HERE, just build a little SDL2 test app, using SDL2 graphics and my custom memory allocator system
  http://natureofcode.com/book/chapter-6-autonomous-agents/

- [X] hot code reloading (static memory block)
  - [X] build state struct that remains intact after reloading the lib
  - [X] makefile command to build so library
  - [X] loading of a lib
  - [X] memory sheme
  - [X] filesystem watcher
- [X] do all memory usage by pushstrcut et all (no predefined arrays no more in permanent)
- [X] use permanent for the grid (using scratch now, dont know why it doenst work)
- [X] clean up path finder grid after path is found (dirty list)
  Instead of the dirty list i can also just clear the whole grid arrays (f,g,h closed,opened,Next)
- [X] before the pathfinder, we need some debug lines (colored lines r/g/b for showing 3d paths that are found)
- [X] start with pathfinder
- [X] glMapBuffer
  On the rpi GL_OES_mapbuffer is supported it seems (https://www.opengl.org/sdk/docs/man2/xhtml/glMapBuffer.xml)
  before I had been trying to use EXT_map_buffer_range, which isnt supported, but I might be able to squeeze a lot more using mapbuffers.
  My hopes are on this now actuall, I think a triple buffered setup using this will give me the most gains on the pi

  I've verified its not fillrate bound (when i draw much smaller sprites, smaller part of the texture too) my fps is roughly the same.
  I'd thought it was the size of the data (so that why i started with halfloat), but now i am thinking it must be the driver itself.

  about mapbuffers:
  http://hacksoflife.blogspot.co.uk/2012/04/beyond-glmapbuffer.html
  http://www.bfilipek.com/2015/01/persistent-mapped-buffers-in-opengl.html#demo
  https://www.raspberrypi.org/forums/viewtopic.php?f=68&t=136093
  http://stackoverflow.com/questions/7243518/opengl-es-2-0-seeking-vbo-performance-optimisation-tips-for-many-moving-vertic

  this describes a possible solution I want to try
  http://hacksoflife.blogspot.co.uk/2015/06/glmapbuffer-no-longer-cool.html
  #+BEGIN_SRC C
  void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data)
  {
   if(offset == 0 && size == size_of_currently_bound_vbo)
   glBufferData(target,size,NULL,last_buffer_usage);
   GLvoid * ptr = glMapBuffer(target,GL_WRITE_ONLY);
   memcpy(ptr, data, size);
   glUnmapBuffer(target);
  }
  #+END_SRC

  So in other words I could try and remake the buffer when its size change (adding or removing actors)
  Otherwise its just using the ptr to the Mapbuffer
- [X] My font drawing routines are broken, by accident the original menlo font doenst have x/y offsets so its ok, but the rest is all busted..
- [X] enable differnt kind of shaders for various parts:
  - xy
  - xy_uv           /// plain bitmap font ui
  - xy_rgb
  - xyz
  - xyz_uv          /// walls
  - xyz_rgb         /// 3d colored lines for debugging, 3d colored rects too.
  - xyz_uv_rgb
  - xyz_uv_palette  /// actors

  the makeBuffer/makeBufferPI functions need to know what kind of layout they will build (when various shaders with various vertex usages is used)
  for that I will need to build some helper struct that knows what attributes are used, how large they are, what their location is (core330) or their name (gles2) and what their type is.
- [X] having a better (simpler to use) debug printing on screen
- [X] having a speed profiler for pieces of code
  A think for now a dictionary with strings like 'render/walls' or 'pathfind/clearpaths' etc will suffice, for every entry I keep track of total time (in this frame) and the amount of times
  the code is hit.
  When my memory sheme is in use I want this dict (and more things) to live in a separate memory location, so you end up with a permanent memory block, a scratch memory block and a debug memory block
  about that memory:
- [X] I do want to also start looking into visible surface detection , for just the wall parts
  instead I just sort the walls to help the renderer, it seemed to improves speed by 800%, we'll see later if (if ever) I need to improve it further.
- [X] position items in 3d world
  Then in the renderer this position is being offsetted to center, maybe that offset is the same 'thing' as is being used with panning.
  You can imagine initializing the pan value, so the world is centered at start.
                                   |
                                   |
                                   |
                                   |
                                  z|
                               0,0,0-------- x
                                    \
                                     \ y
  I think the whole positioning of everything is flipped, but I am not sure, investigate...
  Yes the actors are flipped over Y, text is too, walls aren't :/
  I think it would be wise to let the Actor/Wall and Glyph (as the structs in memory.h) all have world positions immediately
  (So no more x=1, y=1 z=1 for a wall block at tile position 1,1,1, just multiply it with the block sizes already)
  (For blocks however it could be useful to keep the tile positions around (for path finding purposes down the line I think))
  The way the block are oriented shows why the walls weren't flipped over Y.
  I do want them to be consistently (wrong) like the others.
  So I have to calculate the screenY outside the render loops too (So i can flip it in there.)
  maybe walls and actors will get a screenY property (the x is usable already..)
  (like the Glyph has already)
  (BTW there will be y & z, that will still need to be made into a screenY)
  then I can generalize them a bit more.
  also I want to get rid of the large vertices for loops for every kind if possible.
  I reckon I will want two passes
  One where I assume the screen will be of *some* dimensions and 0,0 is at the top left corner.
  This is how I want to feed the position data
  Since I don't really feel like computing screen positions in my game code.
  I will keep the data being x,y,z
  OK got some stuff going now, I do still need to fix the depths, and the sorting.
- [X] made a fps counter on screen
- [X] get some json loading/parsing in (DON'T NEED JSON ANYMORE, BINARY with good headers IS EASIER TO WORK WITH)
  needed for texture atlasses generated by shoebox
  alternatively I could rewrite the outputted json into some custom file format that's exactly right for my c structs, maybe move the json parsing into an external app
  I ended up writing a node app that just creates a binary format of the shoebox js/ json output
  there is one part unclear to me t the moment (spriteSource W, spriteSource H and the other W and H) but I can only know how this works once I start using a lot of sprites
- [X] multiplatform support
  - [X] makefile as simple as possible, screw keeping .o files around
- [X] have some bare bones opengl(es) way of rendering stuff
  - [X] get gl working in sdl2
  - [X] use opengl (3.2) for the desktops
  - [X] use opengles (2.0) for mobile
- [X] JPS PLus pathfinder is broken
  the simplest broken thing was in the cardinal preprocess tests
  if (node->isJumpNode) {  // new situation
    //if (node->isJumpNode && countMovingWest > 0) { // old situation
    countMovingWest = 0;
    jumpPointLastSeen = 1;
  }
  code seems fixed, cannot find any broken situations anymore. (keep an eye on it though)
- [X] compile sdl_mixer and sdl 2 for all platforms
- [X] make some sorting (need memory scheme for algorithm) to sort wall parts on their Y position.
  just using qsort seemed to be sweet.


* Compiling SDL2_Mixer
**** ios
  Download the source zip.
  Unzip in a new directory.
  It needs SDL.h, check the paths its looking for, place a dir SDL/include with all headers next to the
  unzipped folder. (atleast thats where it was looking last when I did it)
  To get it working with c you need to disable the mod and midi preprocessor flags, we only need ogg and wav
  compile it for the simulator and for a real device (release = build for profiling)
  then combine both these libs into 1 universal with
  lipo libSDL2_mixerDev.a libSDL2_mixerSim.a -create -output libSDL2_mixer.a
**** rpi

     prerequisistes:
     apt-get install vorbis-tools (ogg)
     apt-get install libudev-dev

     sudo apt-get install build-essential xorg-dev libudev-dev libts-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libpulse-dev libopenal-dev libogg-dev libvorbis-dev libaudiofile-dev libpng12-dev libfreetype6-dev libusb-dev libdbus-1-dev zlib1g-dev libdirectfb-dev
     ../configure --host=armv7l-raspberry-linux-gnueabihf --disable-pulseaudio --disable-esd --disable-video-mir --disable-video-wayland --disable-video-x11 --disable-video-opengl

    Download the zip
    mkdir build
    cd build
    ../configure --disable-music-mod --disable-music-midi
    make -j 4
    make install


* Tools
- http://renderhjs.net/shoebox/ for generating texture atlasses
  sadly I cannot really get that AIR thing working on *nux, damn adobe
  keep my eyes open for an alternativools
- http://www.angelcode.com/products/bmfont/ for generating bitmap fonts


* design docs, ideas
  idea:
  escalators in London underground

  foot-planting on stairs
  walking stairs vs standing still on escalator
  walking escalator


  the social life of small urban spaces

  Renzo Martens (Institute human activities)
  Keller Easterling Infrastructure Space

  tegenlicht de barbaren (http://www.vpro.nl/programmas/tegenlicht/kijk/afleveringen/2016-2017/cultuurbarbaren.html)
